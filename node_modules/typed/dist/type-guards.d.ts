import type { AnyFunc, Maybe, Nil, PlainObject, Primitive } from "./types";
export declare function isInstanceOf<T extends new (...args: any[]) => any>(constructor: T, value: unknown): value is InstanceType<T>;
export declare function isString(value: unknown): value is string;
export declare function isNumber(value: unknown): value is number;
export declare function isBoolean(value: unknown): value is boolean;
export declare function isBigInt(value: unknown): value is bigint;
export declare function isSymbol(value: unknown): value is symbol;
export declare function isUndefined(value: unknown): value is undefined;
export declare function isFunction(value: unknown): value is AnyFunc;
export declare function isNull(value: unknown): value is null;
export declare function isNil(value: unknown): value is Nil;
export declare function isPrimitive(value: unknown): value is Primitive;
export declare function isDate(value: unknown): value is Date;
export declare function isArray(value: unknown): value is unknown[];
export declare function isPlainObject(value: unknown): value is PlainObject;
export declare function isIterable(value: unknown): value is Iterable<unknown>;
export declare function isPromise(value: unknown): value is Promise<unknown>;
export declare function isPresent<T>(value: Maybe<T>): value is T;
export declare function isRegExp(value: unknown): value is RegExp;
export declare function isSet(value: unknown): value is Set<unknown>;
export declare function isMap(value: unknown): value is Map<unknown, unknown>;
export declare function isPositive(num: number): boolean;
export declare function isNegative(num: number): boolean;
export declare function isInteger(num: number): boolean;
export declare function isFloat(num: number): boolean;
export declare function isEven(num: number): boolean;
export declare function isOdd(num: number): boolean;
export declare function isPrime(num: number): boolean;
